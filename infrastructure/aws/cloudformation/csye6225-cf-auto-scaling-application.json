{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Auto Scaling application stack",
    "Parameters": {
        "domainName": {
            "Type": "String"
        },
        "HostedZoneResourceId": {
            "Type": "String"
        },
        "CertificateArnNumber": {
            "Type": "String"
        },
        "DNSRecordName": {
            "Type": "String"
        },
        "Ec2TagValue": {
            "Type": "String",
            "Default": ""
        },
        "StackName": {
            "Type": "String",
            "Default": ""
        }
    },
    "Resources": {
        "WebInstanceSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow http to client host",
                "VpcId": {
                    "Fn::ImportValue": "Networking-VpcId"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 22,
                        "ToPort": 22,
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 80,
                        "ToPort": 80,
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 8080,
                        "ToPort": 8080,
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 443,
                        "ToPort": 443,
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "StackName"
                                    },
                                    "-csye6225-webapp-security-group"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "DbInstanceSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "VPC Security Group for RDS",
                "VpcId": {
                    "Fn::ImportValue": "Networking-VpcId"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 3306,
                        "ToPort": 3306,
                        "SourceSecurityGroupId": {
                            "Ref": "WebInstanceSecurityGroup"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "StackName"
                                    },
                                    "-csye6225-rds-security-group"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "LoadBalancerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Security group for every instances attached",
                "VpcId": {
                    "Fn::ImportValue": "Networking-VpcId"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "8080",
                        "ToPort": "8080",
                        "DestinationSecurityGroupId": {
                            "Fn::GetAtt": [
                                "WebInstanceSecurityGroup",
                                "GroupId"
                            ]
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "StackName"
                                    },
                                    "-csye6225-loadbalancer-security-group"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "MyEc2Instance": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "AssociatePublicIpAddress": "true",
                "KeyName": "csye6225",
                "ImageId": "ami-9887c6e7",
                "InstanceType": "t2.micro",
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "\n",
                            [
                                "#!/bin/bash -xe",
                                "sudo yum update -y",
                                "sudo yum install ruby ntp python mysql wget java-1.8.0-openjdk-devel -y",
                                "sudo wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install",
                                "sudo chmod +x ./install",
                                "sudo ./install auto",
                                "sudo service codedeploy-agent start",
                                "systemctl start ntpd",
                                "systemctl enable ntpd",
                                "groupadd tomcat",
                                "useradd -M -s /bin/nologin -g tomcat -d /opt/tomcat tomcat",
                                "cd /tmp",
                                "wget http://apache.mirrors.pair.com/tomcat/tomcat-8/v8.5.34/bin/apache-tomcat-8.5.34.tar.gz",
                                "mkdir /opt/tomcat",
                                "tar xvf apache-tomcat-8*tar.gz -C /opt/tomcat --strip-components=1",
                                "rm -rf *.gz",
                                "cd /opt/tomcat",
                                "chgrp -R tomcat /opt/tomcat",
                                "chmod -R g+r conf",
                                "chmod g+x conf",
                                "chown -R tomcat webapps/ work/ temp/ logs/ conf/",
                                "sudo touch bin/setenv.sh",
                                "sudo chmod 777 bin/setenv.sh",
                                "sudo echo 'export USERNAME=csye6225master' >> bin/setenv.sh",
                                "sudo echo 'export PASSWORD=csye6225password' >> bin/setenv.sh",
                                "sudo echo 'export DIALECT=org.hibernate.dialect.MySQLDialect' >> bin/setenv.sh",
                                "sudo echo 'export DRIVER=com.mysql.jdbc.Driver' >> bin/setenv.sh",
                                "sudo echo 'export SPRING_PROFILES_ACTIVE=aws' >> bin/setenv.sh",
                                "sudo echo 'export FILEPATH=/tmp/' >> bin/setenv.sh",
                                "sudo echo 'export ENDPOINT=https://s3.us-east-1.amazonaws.com' >> bin/setenv.sh",
                                "sudo echo 'export TOPIC=password_reset' >> bin/setenv.sh",
                                "sudo echo 'export PUBLISHMETRICS=true' >> bin/setenv.sh",
                                "sudo echo 'export METRICSHOSTNAME=localhost' >> bin/setenv.sh",
                                "sudo echo 'export METRICPORT=8125' >> bin/setenv.sh",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "sudo echo 'export URL=jdbc:mysql://",
                                            {
                                                "Fn::GetAtt": [
                                                    "MyDB",
                                                    "Endpoint.Address"
                                                ]
                                            },
                                            ":3306/csye6225' >> bin/setenv.sh"
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "sudo echo 'export BUCKETNAME=",
                                            {
                                                "Ref": "RecordServiceS3Bucket"
                                            },
                                            "' >> bin/setenv.sh"
                                        ]
                                    ]
                                },
                                "cd /usr/lib/systemd/system",
                                "touch tomcat.service",
                                "echo '[Unit]' > tomcat.service",
                                "echo 'Description=Apache Tomcat Web Application Container' >> tomcat.service",
                                "echo 'After=syslog.target network.target' >> tomcat.service",
                                "echo '[Service]' >> tomcat.service",
                                "echo 'Type=forking' >> tomcat.service",
                                "echo 'Environment=JAVA_HOME=/usr/lib/jvm/jre' >> tomcat.service",
                                "echo 'Environment=CATALINA_PID=/opt/tomcat/temp/tomcat.pid' >> tomcat.service",
                                "echo 'Environment=CATALINA_HOME=/opt/tomcat' >> tomcat.service",
                                "echo 'Environment=CATALINA_BASE=/opt/tomcat' >> tomcat.service",
                                "echo 'Environment=\"CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC\"' >> tomcat.service",
                                "echo 'ExecStart=/opt/tomcat/bin/startup.sh' >> tomcat.service",
                                "echo 'ExecStop=/bin/kill -15 $MAINPID' >> tomcat.service",
                                "echo 'User=tomcat' >> tomcat.service",
                                "echo 'Group=tomcat' >> tomcat.service",
                                "echo 'UMask=0007' >> tomcat.service",
                                "echo 'RestartSec=10' >> tomcat.service",
                                "echo 'Restart=always' >> tomcat.service",
                                "echo '[Install]' >> tomcat.service",
                                "echo 'WantedBy=multi-user.target' >> tomcat.service",
                                "systemctl daemon-reload",
                                "systemctl enable tomcat.service",
                                "systemctl start tomcat.service",
                                "sudo mkdir -p /tmp/AmazonCloudWatchAgent",
                                "cd /tmp/AmazonCloudWatchAgent",
                                "sudo wget https://s3.amazonaws.com/amazoncloudwatch-agent/centos/amd64/latest/amazon-cloudwatch-agent.rpm",
                                "sudo rpm -U ./amazon-cloudwatch-agent.rpm",
                                "sudo touch /opt/amazon-cloudwatch-agent.json",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "sudo echo '{",
                                            "\"agent\": { ",
                                            "\"metrics_collection_interval\": 10,",
                                            "\"region\": \"us-east-1\",",
                                            "\"logfile\": \"/var/logs/amazon-cloudwatch-agent.log\" },",
                                            "\"metrics\": {",
                                            "\"metrics_collected\": {",
                                            "\"statsd\": {",
                                            "\"service_address\": \":8125\",",
                                            "\"metrics_collection_interval\": 10,",
                                            "\"metrics_aggregation_interval\": 0 } } },",
                                            "\"logs\": {",
                                            "\"logs_collected\": {",
                                            "\"files\": {",
                                            "\"collect_list\": [ {",
                                            "\"file_path\": \"/opt/tomcat/logs/catalina.out\",",
                                            "\"log_group_name\": \"csye6225_fall2018\",",
                                            "\"log_stream_name\": \"webapi\",",
                                            "\"timestamp_format\": \"%H:%M:%S %y %b %-d\" } ] } },",
                                            "\"log_stream_name\": \"cloudwatch_log_stream\" }",
                                            "}' > /opt/amazon-cloudwatch-agent.json"
                                        ]
                                    ]
                                },
                                "sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/amazon-cloudwatch-agent.json -s",
                                "cd /opt",
                                "sudo wget https://s3.amazonaws.com/configfileforcloudwatch/amazon-cloudwatch-agent.service",
                                "sudo cp amazon-cloudwatch-agent.service /usr/lib/systemd/system/",
                                "sudo systemctl enable amazon-cloudwatch-agent.service",
                                "sudo systemctl start amazon-cloudwatch-agent.service"
                            ]
                        ]
                    }
                },
                "SecurityGroups": [
                    {
                        "Ref": "WebInstanceSecurityGroup"
                    }
                ],
                "IamInstanceProfile": {
                    "Fn::ImportValue": "cicdInstanceProfile"
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sdm",
                        "Ebs": {
                            "VolumeType": "gp2",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "20"
                        }
                    }
                ]
            }
        },
        "WebServerGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "Cooldown": "60",
                "LaunchConfigurationName": {
                    "Ref": "MyEc2Instance"
                },
                "MinSize": "3",
                "MaxSize": "10",
                "DesiredCapacity": "3",
                "VPCZoneIdentifier": [
                    {
                        "Fn::ImportValue": "Networking-SubnetId"
                    },
                    {
                        "Fn::ImportValue": "Networking-SubnetId2"
                    }
                ],
                "TargetGroupARNs": [
                    {
                        "Ref": "ALBTargetGroup"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "Ec2TagValue"
                        },
                        "PropagateAtLaunch": "true"
                    }
                ]
            },
            "DependsOn": "ALBListener"
        },
        "WebServerScaleUpPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "WebServerGroup"
                },
                "Cooldown": "60",
                "ScalingAdjustment": "1"
            }
        },
        "WebServerScaleDownPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "WebServerGroup"
                },
                "Cooldown": "60",
                "ScalingAdjustment": "-1"
            }
        },
        "CPUAlarmHigh": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-up if CPU > 10% for 10 minutes",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "300",
                "EvaluationPeriods": "2",
                "Threshold": "10",
                "AlarmActions": [
                    {
                        "Ref": "WebServerScaleUpPolicy"
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "WebServerGroup"
                        }
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold"
            }
        },
        "CPUAlarmLow": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-down if CPU < 8% for 10 minutes",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "300",
                "EvaluationPeriods": "2",
                "Threshold": "8",
                "AlarmActions": [
                    {
                        "Ref": "WebServerScaleDownPolicy"
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "WebServerGroup"
                        }
                    }
                ],
                "ComparisonOperator": "LessThanThreshold"
            }
        },
        "ApplicationLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Scheme": "internet-facing",
                "SecurityGroups": [
                    {
                        "Ref": "LoadBalancerSecurityGroup"
                    }
                ],
                "Name": "csye6225LoadBalancer",
                "Subnets": [
                    {
                        "Fn::ImportValue": "Networking-SubnetId"
                    },
                    {
                        "Fn::ImportValue": "Networking-SubnetId2"
                    }
                ],
                "Type": "application",
                "IpAddressType": "ipv4"
            }
        },
        "ALBTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "Protocol": "HTTP",
                "Name": "MyTargetGroup",
                "Port": 8080,
                "VpcId": {
                    "Fn::ImportValue": "Networking-VpcId"
                },
                "Tags": [
                    {
                        "Key": "NAME",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "StackName"
                                    },
                                    "-csye6225-alb-target-group"
                                ]
                            ]
                        }
                    }
                ]
            }
        },
        "ALBListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "Certificates": [
                    {
                        "CertificateArn": {
                            "Ref": "CertificateArnNumber"
                        }
                    }
                ],
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "ALBTargetGroup"
                        }
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "ApplicationLoadBalancer"
                },
                "Port": 443,
                "Protocol": "HTTPS"
            }
        },
        "ALBListenerhttp": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "ALBTargetGroup"
                        }
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "ApplicationLoadBalancer"
                },
                "Port": 80,
                "Protocol": "HTTP"
            }
        },
        "MyDNSRecord": {
            "Type": "AWS::Route53::RecordSetGroup",
            "Properties": {
                "HostedZoneId": {
                    "Ref": "HostedZoneResourceId"
                },
                "Comment": "DNS name for my instance.",
                "RecordSets": [
                    {
                        "Name": {
                            "Ref": "DNSRecordName"
                        },
                        "Type": "A",
                        "AliasTarget": {
                            "HostedZoneId": {
                                "Fn::GetAtt": [
                                    "ApplicationLoadBalancer",
                                    "CanonicalHostedZoneID"
                                ]
                            },
                            "DNSName": {
                                "Fn::GetAtt": [
                                    "ApplicationLoadBalancer",
                                    "DNSName"
                                ]
                            }
                        }
                    }
                ]
            }
        },
        "CodeDeployApplication": {
            "Type": "AWS::CodeDeploy::Application",
            "Properties": {
                "ApplicationName": "CodeDeployMyWebApi"
            }
        },
        "DeploymentGroup": {
            "Type": "AWS::CodeDeploy::DeploymentGroup",
            "Properties": {
                "ApplicationName": {
                    "Ref": "CodeDeployApplication"
                },
                "DeploymentConfigName": "CodeDeployDefault.OneAtATime",
                "DeploymentGroupName": "CodeDeployApplicationGroup",
                "AutoScalingGroups": [
                    {
                        "Ref": "WebServerGroup"
                    }
                ],
                "LoadBalancerInfo": {
                    "ElbInfoList": [
                        {
                            "Name": {
                                "Fn::GetAtt": [
                                    "ApplicationLoadBalancer",
                                    "LoadBalancerName"
                                ]
                            }
                        }
                    ]
                },
                "DeploymentStyle": {
                    "DeploymentType": "IN_PLACE",
                    "DeploymentOption": "WITHOUT_TRAFFIC_CONTROL"
                },
                "Ec2TagFilters": [
                    {
                        "Key": "Name",
                        "Type": "KEY_AND_VALUE",
                        "Value": {
                            "Ref": "Ec2TagValue"
                        }
                    }
                ],
                "ServiceRoleArn": {
                    "Fn::ImportValue": "CodeDeployArn"
                }
            }
        },
        "MyDynamoDBTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [
                    {
                        "AttributeName": "Id",
                        "AttributeType": "S"
                    },
                    {
                        "AttributeName": "Email",
                        "AttributeType": "S"
                    }
                ],
                "TimeToLiveSpecification": {
                    "AttributeName": "ttl",
                    "Enabled": true
                },
                "KeySchema": [
                    {
                        "AttributeName": "Email",
                        "KeyType": "HASH"
                    },
                    {
                        "AttributeName": "Id",
                        "KeyType": "RANGE"
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": "5",
                    "WriteCapacityUnits": "5"
                },
                "TableName": "csye6225",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "StackName"
                                    },
                                    "-csye6225-DynamoDB"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    }
                ]
            }
        },
        "RecordServiceS3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": {
                    "Fn::ImportValue": "s3BucketNameWebApi"
                }
            }
        },
        "myDBSubnetGroup": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
                "DBSubnetGroupDescription": "Db Subnet Group",
                "SubnetIds": [
                    {
                        "Fn::ImportValue": "Networking-SubnetId"
                    },
                    {
                        "Fn::ImportValue": "Networking-SubnetId2"
                    }
                ]
            }
        },
        "MyDB": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "DBName": "csye6225",
                "DBInstanceClass": "db.t2.medium",
                "MultiAZ": "false",
                "DBInstanceIdentifier": "csye6225-fall2018",
                "DBSubnetGroupName": {
                    "Ref": "myDBSubnetGroup"
                },
                "Engine": "MySQL",
                "EngineVersion": "5.5.59",
                "MasterUsername": "csye6225master",
                "MasterUserPassword": "csye6225password",
                "PubliclyAccessible": "false",
                "AllocatedStorage": "20",
                "VPCSecurityGroups": [
                    {
                        "Fn::GetAtt": [
                            "DbInstanceSecurityGroup",
                            "GroupId"
                        ]
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "My SQL Database"
                    }
                ]
            }
        },
        "WAFBlacklistSet": {
          "Type": "AWS::WAFRegional::IPSet",
          "Properties": {
            "Name": {
              "Fn::Join": [" - ", [{
                "Ref": "AWS::StackName"
              }, "Blacklist Set"]]
            },
            "IPSetDescriptors" : [
              {
                "Type" : "IPV4",
                "Value" : "10.0.0.0/8"
              },
              {
                "Type" : "IPV4",
                "Value" : "192.168.0.0/16"
              },
              {
                "Type" : "IPV4",
                "Value" : "169.254.0.0/16"
              },
              {
                "Type" : "IPV4",
                "Value" : "172.16.0.0/16"
              },
              {
                "Type" : "IPV4",
                "Value" : "127.0.0.1/32"
              }
            ]
          }
        },
        "WAFSqlInjectionDetection": {
          "Type": "AWS::WAFRegional::SqlInjectionMatchSet",
          "Properties": {
            "Name": {
              "Fn::Join": [" - ", [{
                "Ref": "AWS::StackName"
              }, "SQL injection Detection"]]
            },
            "SqlInjectionMatchTuples": [{
              "FieldToMatch": {
                "Type": "QUERY_STRING"
              },
              "TextTransformation": "URL_DECODE"
            }, {
              "FieldToMatch": {
                "Type": "QUERY_STRING"
              },
              "TextTransformation": "HTML_ENTITY_DECODE"
            }, {
              "FieldToMatch": {
                "Type": "BODY"
              },
              "TextTransformation": "URL_DECODE"
            }, {
              "FieldToMatch": {
                "Type": "BODY"
              },
              "TextTransformation": "HTML_ENTITY_DECODE"
            }, {
              "FieldToMatch": {
                "Type": "URI"
              },
              "TextTransformation": "URL_DECODE"
            }, {
              "FieldToMatch": {
                "Type": "URI"
              },
              "TextTransformation": "HTML_ENTITY_DECODE"
            }, {
              "FieldToMatch": {
                "Type": "HEADER",
                "Data": "Cookie"
              },
              "TextTransformation": "URL_DECODE"
            }, {
              "FieldToMatch": {
                "Type": "HEADER",
                "Data": "Cookie"
              },
              "TextTransformation": "HTML_ENTITY_DECODE"
            }, {
              "FieldToMatch": {
                "Type": "HEADER",
                "Data": "Authorization"
              },
              "TextTransformation": "URL_DECODE"
            }, {
              "FieldToMatch": {
                "Type": "HEADER",
                "Data": "Authorization"
              },
              "TextTransformation": "HTML_ENTITY_DECODE"
            }]
          }
        },
        "WAFXssDetection": {
          "Type": "AWS::WAFRegional::XssMatchSet",
          "Properties": {
            "Name": {
              "Fn::Join": [" - ", [{
                "Ref": "AWS::StackName"
              }, "XSS Detection Detection"]]
            },
            "XssMatchTuples": [{
              "FieldToMatch": {
                "Type": "QUERY_STRING"
              },
              "TextTransformation": "URL_DECODE"
            }, {
              "FieldToMatch": {
                "Type": "QUERY_STRING"
              },
              "TextTransformation": "HTML_ENTITY_DECODE"
            }, {
              "FieldToMatch": {
                "Type": "BODY"
              },
              "TextTransformation": "URL_DECODE"
            }, {
              "FieldToMatch": {
                "Type": "BODY"
              },
              "TextTransformation": "HTML_ENTITY_DECODE"
            }, {
              "FieldToMatch": {
                "Type": "URI"
              },
              "TextTransformation": "URL_DECODE"
            }, {
              "FieldToMatch": {
                "Type": "URI"
              },
              "TextTransformation": "HTML_ENTITY_DECODE"
            }, {
              "FieldToMatch": {
                "Type": "HEADER",
                "Data": "Cookie"
              },
              "TextTransformation": "URL_DECODE"
            }, {
              "FieldToMatch": {
                "Type": "HEADER",
                "Data": "Cookie"
              },
              "TextTransformation": "HTML_ENTITY_DECODE"
            }]
          }
        },
        "AuthTokenStringSet": {
          "Type": "AWS::WAFRegional::ByteMatchSet",
          "Properties": {
            "Name": {
                  "Fn::Join": [" - ", [{
                    "Ref": "AWS::StackName"
                  }, "match-auth-tokens"]]
            },
            "ByteMatchTuples": [
              {
                "FieldToMatch" : {
                  "Type": "HEADER",
                  "Data": "cookie"
                },
                "TargetString" : "badrefer1",
                "TextTransformation" : "URL_DECODE",
                "PositionalConstraint" : "CONTAINS"
              },
              {
                "FieldToMatch" : {
                  "Type": "HEADER",
                  "Data": "authorization"
                },
                "TargetString" : ".TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ",
                "TextTransformation" : "URL_DECODE",
                "PositionalConstraint" : "ENDS_WITH"
              }
            ]
          }
        },
        "WAFPathStringSet": {
          "Type": "AWS::WAFRegional::ByteMatchSet",
          "Properties": {
            "Name": {
                  "Fn::Join": [" - ", [{
                    "Ref": "AWS::StackName"
                  }, "match-rfi-lfi-traversal"]]
            },
            "ByteMatchTuples": [
              {
                "FieldToMatch" : {
                  "Type": "URI",
                },
                "TargetString" : "../",
                "TextTransformation" : "URL_DECODE",
                "PositionalConstraint" : "CONTAINS"
              },
              {
                "FieldToMatch" : {
                  "Type": "URI",
                },
                "TargetString" : "../",
                "TextTransformation" : "HTML_ENTITY_DECODE",
                "PositionalConstraint" : "CONTAINS"
              },
              {
                "FieldToMatch" : {
                  "Type": "QUERY_STRING",
                },
                "TargetString" : "../",
                "TextTransformation" : "URL_DECODE",
                "PositionalConstraint" : "CONTAINS"
              },
              {
                "FieldToMatch" : {
                  "Type": "QUERY_STRING",
                },
                "TargetString" : "../",
                "TextTransformation" : "HTML_ENTITY_DECODE",
                "PositionalConstraint" : "CONTAINS"
              },
              {
                "FieldToMatch" : {
                  "Type": "URI",
                },
                "TargetString" : "://",
                "TextTransformation" : "URL_DECODE",
                "PositionalConstraint" : "CONTAINS"
              },
              {
                "FieldToMatch" : {
                  "Type": "URI",
                },
                "TargetString" : "://",
                "TextTransformation" : "HTML_ENTITY_DECODE",
                "PositionalConstraint" : "CONTAINS"
              },
              {
                "FieldToMatch" : {
                  "Type": "QUERY_STRING",
                },
                "TargetString" : "://",
                "TextTransformation" : "URL_DECODE",
                "PositionalConstraint" : "CONTAINS"
              },
              {
                "FieldToMatch" : {
                  "Type": "QUERY_STRING",
                },
                "TargetString" : "://",
                "TextTransformation" : "HTML_ENTITY_DECODE",
                "PositionalConstraint" : "CONTAINS"
              }
            ]
          }
        },
        "WAFServerSideIncludeStringSet": {
          "Type": "AWS::WAFRegional::ByteMatchSet",
          "Properties": {
            "Name": {
                  "Fn::Join": [" - ", [{
                    "Ref": "AWS::StackName"
                  }, "match-ssi"]]
            },
            "ByteMatchTuples": [
              {
                "FieldToMatch" : {
                  "Type": "URI",
                },
                "TargetString" : ".cfg",
                "TextTransformation" : "LOWERCASE",
                "PositionalConstraint" : "ENDS_WITH"
              },
              {
                "FieldToMatch" : {
                  "Type": "URI",
                },
                "TargetString" : ".config",
                "TextTransformation" : "LOWERCASE",
                "PositionalConstraint" : "ENDS_WITH"
              },
              {
                "FieldToMatch" : {
                  "Type": "URI",
                },
                "TargetString" : ".conf",
                "TextTransformation" : "LOWERCASE",
                "PositionalConstraint" : "ENDS_WITH"
              },
              {
                "FieldToMatch" : {
                  "Type": "URI",
                },
                "TargetString" : ".ini",
                "TextTransformation" : "LOWERCASE",
                "PositionalConstraint" : "ENDS_WITH"
              },
              {
                "FieldToMatch" : {
                  "Type": "URI",
                },
                "TargetString" : ".log",
                "TextTransformation" : "LOWERCASE",
                "PositionalConstraint" : "ENDS_WITH"
              },
              {
                "FieldToMatch" : {
                  "Type": "URI",
                },
                "TargetString" : ".bak",
                "TextTransformation" : "LOWERCASE",
                "PositionalConstraint" : "ENDS_WITH"
              },
              {
                "FieldToMatch" : {
                  "Type": "URI",
                },
                "TargetString" : ".backup",
                "TextTransformation" : "LOWERCASE",
                "PositionalConstraint" : "ENDS_WITH"
              },
            ]
          }
        },
        "WAFSizeRestrictionSet": {
          "Type": "AWS::WAFRegional::SizeConstraintSet",
          "Properties": {
            "Name": "WAFSizeRestrictionSet",
            "SizeConstraints": [
              {
                "FieldToMatch": {
                  "Type": "BODY"
                },
                "ComparisonOperator": "GT",
                "Size": "4194304",
                "TextTransformation": "NONE"
              }
            ]
          }
        },
        "WAFCSRFMethodStringSet": {
          "Type": "AWS::WAFRegional::ByteMatchSet",
          "Properties": {
            "Name": "WAFCSRFMethodStringSet",
            "ByteMatchTuples": [
              {
                "FieldToMatch": {
                  "Type": "METHOD"
                },
                "PositionalConstraint" : "EXACTLY",
                "TargetString" : "post",
                "TextTransformation": "LOWERCASE"
              }
            ]
          }
        },
        "WAFBlacklistRule": {
          "Type": "AWS::WAFRegional::Rule",
          "DependsOn": "WAFBlacklistSet",
          "Properties": {
            "Name": {
              "Fn::Join": [" - ", [{
                "Ref": "AWS::StackName"
              }, "Blacklist Rule"]]
            },
            "MetricName": "SecurityAutomationsBlacklistRule",
            "Predicates": [{
              "DataId": {
                "Ref": "WAFBlacklistSet"
              },
              "Negated": false,
              "Type": "IPMatch"
            }]
          }
        },
        "WAFSqlInjectionRule": {
          "Type": "AWS::WAFRegional::Rule",
          "DependsOn": "WAFSqlInjectionDetection",
          "Properties": {
            "Name": {
              "Fn::Join": [" - ", [{
                "Ref": "AWS::StackName"
              }, "SQL Injection Rule"]]
            },
            "MetricName": "SecurityAutomationsSqlInjectionRule",
            "Predicates": [{
              "DataId": {
                "Ref": "WAFSqlInjectionDetection"
              },
              "Negated": false,
              "Type": "SqlInjectionMatch"
            }]
          }
        },
        "WAFXssRule": {
          "Type": "AWS::WAFRegional::Rule",
          "DependsOn": "WAFXssDetection",
          "Properties": {
            "Name": "WAFXssRule",
            "MetricName": "WAFXssRule",
            "Predicates": [{
              "DataId": {
                "Ref": "WAFXssDetection"
              },
              "Negated": false,
              "Type": "XssMatch"
            }]
          }
        },
        "WAFAuthTokenRule" : {
          "Type": "AWS::WAFRegional::Rule",
          "DependsOn": "AuthTokenStringSet",
          "Properties": {
            "Name": "WAFAuthTokenRule",
            "MetricName" : "AuthTokenRule",
            "Predicates": [
              {
                "DataId" : {  "Ref" : "AuthTokenStringSet" },
                "Negated" : false,
                "Type" : "ByteMatch"
              }
            ]
          }
        },
        "WAFPathRule" : {
          "Type": "AWS::WAFRegional::Rule",
          "DependsOn": "WAFPathStringSet",
          "Properties": {
            "Name": "WAFPathRule",
            "MetricName" : "WAFPathRule",
            "Predicates": [
              {
                "DataId" : {  "Ref" : "WAFPathStringSet" },
                "Negated" : false,
                "Type" : "ByteMatch"
              }
            ]
          }
        },
        "WAFServerSideIncludeRule" : {
          "Type": "AWS::WAFRegional::Rule",
          "DependsOn" : "WAFServerSideIncludeStringSet",
          "Properties": {
            "Name": "WAFServerSideIncludeRule",
            "MetricName" : "WAFServerSideIncludeRule",
            "Predicates": [
              {
                "DataId" : {  "Ref" : "WAFServerSideIncludeStringSet" },
                "Negated" : false,
                "Type" : "ByteMatch"
              }
            ]
          }
        },
        "WAFSizeRestrictionRule" : {
          "Type": "AWS::WAFRegional::Rule",
          "DependsOn" : "WAFSizeRestrictionSet",
          "Properties": {
            "Name": "WAFSizeRestrictionRule",
            "MetricName" : "WAFSizeRestrictionRule",
            "Predicates": [
              {
                "DataId" : {  "Ref" : "WAFSizeRestrictionSet" },
                "Negated" : false,
                "Type" : "SizeConstraint"
              }
            ]
          }
        },
        "WAFCSRFMethodRule" : {
          "Type": "AWS::WAFRegional::Rule",
          "DependsOn" : "WAFCSRFMethodStringSet",
          "Properties": {
            "Name": "WAFCSRFMethodRule",
            "MetricName" : "WAFCSRFMethodRule",
            "Predicates": [
              {
                "DataId" : {  "Ref" : "WAFCSRFMethodStringSet" },
                "Negated" : false,
                "Type" : "ByteMatch"
              }
            ]
          }
        },
        "MyWebAcl": {
          "Type": "AWS::WAFRegional::WebACL",
          "DependsOn": ["WAFBlacklistRule", "WAFSqlInjectionRule", "WAFXssRule", "WAFAuthTokenRule", "WAFPathRule", "WAFServerSideIncludeRule", "WAFSizeRestrictionRule", "WAFCSRFMethodRule"],
          "Properties": {
            "Name": "WebACL to with three rules",
            "DefaultAction": {
              "Type": "ALLOW"
            },
            "MetricName": "MyWebACL",
            "Rules": [
              {
                "Action": {
                  "Type": "BLOCK"
                },
                "Priority": 1,
                "RuleId": {
                    "Ref": "WAFSqlInjectionRule"
                }
              },
              {
                "Action": {
                  "Type": "BLOCK"
                },
                "Priority": 2,
                "RuleId": {
                  "Ref": "WAFXssRule"
                }
              },
              {
                "Action": {
                  "Type": "BLOCK"
                },
                "Priority": 3,
                "RuleId": {
                  "Ref": "WAFBlacklistRule"
                }
              },
              {
                "Action": {
                  "Type": "BLOCK"
                },
                "Priority": 4,
                "RuleId": {
                  "Ref": "WAFAuthTokenRule"
                }
              },
              {
                "Action": {
                  "Type": "BLOCK"
                },
                "Priority": 5,
                "RuleId": {
                  "Ref": "WAFPathRule"
                }
              },
              {
                "Action": {
                  "Type": "BLOCK"
                },
                "Priority": 6,
                "RuleId": {
                  "Ref": "WAFSizeRestrictionRule"
                }
              },
              {
                "Action": {
                  "Type": "BLOCK"
                },
                "Priority": 7,
                "RuleId": {
                  "Ref": "WAFServerSideIncludeRule"
                }
              },
              {
                "Action": {
                  "Type": "BLOCK"
                },
                "Priority": 8,
                "RuleId": {
                  "Ref": "WAFCSRFMethodRule"
                }
              }
            ]
          }
        },
        "MyWebACLAssociation": {
          "Type": "AWS::WAFRegional::WebACLAssociation",
          "Properties": {
            "ResourceArn": { "Ref": "ApplicationLoadBalancer" },
            "WebACLId": { "Ref": "MyWebAcl" }
          }
        }
    }
}